//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Tools/Input/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""373291b4-2d6f-4fbf-b83c-282830a1cecd"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""9434382a-72e8-43e1-9006-4d6546120f5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""68a9387c-3226-4d98-a983-cac2cb6df0c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""75728085-2e16-47c7-9302-370329f23608"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""22f6d330-ba6b-4232-b80b-9e6f807648bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""8a5195d4-9a7f-45fa-a3f5-07a3cb68cab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHand1"",
                    ""type"": ""Button"",
                    ""id"": ""94194871-a74c-4522-b683-62f7097508d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHand2"",
                    ""type"": ""Button"",
                    ""id"": ""bf5e0058-d888-41d5-96f5-840b356cd231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHand1"",
                    ""type"": ""Button"",
                    ""id"": ""7822224a-c3c8-4b78-aaa6-58f52e9b65b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHand2"",
                    ""type"": ""Button"",
                    ""id"": ""d190c752-c4c1-4f8e-9409-bfe9a84482b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""193566a1-0f37-484e-8303-cf1ab560122d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLockOnTarget"",
                    ""type"": ""Value"",
                    ""id"": ""107e3378-3229-4f4f-b7bb-522339f09515"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenMenus"",
                    ""type"": ""Button"",
                    ""id"": ""e2c620af-dec8-4e7c-8404-815e2e98e46a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a64590f2-8cbb-4ad0-b625-a747267372c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a41c74f6-d6d4-4f1d-b24d-90725b1c832e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""8b867f11-c4dd-4e73-b844-0da49ab003c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""991e9526-981b-4dd2-9371-ed3c7938a2e9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""209ef098-0759-4dd6-abfd-792459045868"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d046ee7e-849b-4dd4-97e0-c88f79baaffe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b97358b-2891-444a-a6e6-0c89b6bd0ec1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6203d7c8-c27d-4b5f-9021-eefaf202fb7d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42bca0f8-967a-473b-8a74-f577b7d97860"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88b4dcd8-6b02-4ce0-a9fa-783c7f8b0fbc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a8a35e2-9301-45dd-8b5c-33f6033574c7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff1ea8f4-f419-443c-8a3f-cda7e56b96e4"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddbd496c-755b-4282-952a-cff419b0fb95"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d88753a2-6fa5-4012-81e6-53b60b78ba0b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2883256-8681-48bc-9332-207c68149b79"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f014847-53de-4656-b193-196f336feef8"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightHand1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af1651c3-6818-44d2-ac5e-5b9d0b73e872"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightHand1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e285beb-565c-452f-ae03-1f93f3ebc53d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightHand2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ef981e2-40b6-47f7-8434-6bb8cb0f1a67"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftHand2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed259285-6036-437e-9196-25119e8f8eb4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftHand1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e070ddbc-02c0-464c-992d-0c6ee54ecc1b"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc9de563-d6ec-49df-8aa8-8ddcf08fc03a"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8757e68e-77f4-48b5-b6e0-4b5442bd2ec3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""600e1268-f3d4-43dd-af59-412696b6baad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""66e6c934-7b9c-4af9-8cf3-9968b092fbba"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""860b8d6f-e1b5-485f-adc1-641ff42ebf57"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3abd614f-3ee9-45a4-aba6-d8fef4b84e77"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""290eafea-d104-4a1b-b65b-19f2b3322d7a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchLockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4341e270-e4bf-4817-862f-e6ad61724cb6"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenMenus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e607e408-ea2f-4b53-81b8-36108ac9cb00"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OpenMenus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca2efb31-947d-4928-92ec-d805600d2c80"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50cc8d93-0bcb-49d6-b274-96d1d56288e6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""145453ad-3481-42bd-abd3-899c1c3b7b59"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightHand2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e918c9-78f2-4910-91aa-ea556ba9c7c7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftHand1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""099db198-e460-434f-b47d-139dc7431432"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftHand2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""56f1012b-2d70-428d-9b3f-196b17941920"",
            ""actions"": [
                {
                    ""name"": ""CloseMenus"",
                    ""type"": ""Button"",
                    ""id"": ""ca401e16-8dea-4bd6-9106-14ab97037537"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AssignHotKey"",
                    ""type"": ""Button"",
                    ""id"": ""31688786-4e67-4955-9e70-5c82214d03c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""b6a46aa4-0758-47f4-833d-a6064938d68d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""10341bcb-4af5-4e00-bad6-02656a51a75c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToRightTab"",
                    ""type"": ""Button"",
                    ""id"": ""c810782f-6a38-45c2-984c-8357575cc8ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToLeftTab"",
                    ""type"": ""Button"",
                    ""id"": ""d1cb5bbf-924b-43c4-9289-c9c972951295"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveHotKey"",
                    ""type"": ""Button"",
                    ""id"": ""bf583991-1352-4c9d-8365-749a990d3db5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""1cf20917-7a35-42dd-aa39-24c5021fc3b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae9b87b1-6738-4dc7-b723-8d0dc29645b0"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CloseMenus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea2d06db-9728-402e-b63b-46d3e5f6e80d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CloseMenus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ee35213-fb96-425e-935d-088bdf129110"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AssignHotKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef515b60-9935-4462-ab5d-13ceeeb4f6ba"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AssignHotKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db70ee4f-ae5e-47ec-84a3-0e5206cc5f2e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cdbe357-f83f-4328-bf91-15dbc2dacc95"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3028e1bf-c6dd-4f53-a155-406fa4d042ec"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4889c84b-e092-48aa-9a00-860ea67110d3"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c6280c-c78a-4036-b929-37751c486157"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GoToRightTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f9f6f1-8055-46bc-9e20-603e6999ae4d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoToRightTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24bddc72-1170-4b7f-b5e4-456886f1039d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GoToLeftTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b6c1903-46b6-42e6-9535-5f3dedd32d3b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GoToLeftTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3db9b090-c6ce-441b-afba-e464f1b1622d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RemoveHotKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e53d26d-183c-4c3f-8a20-3866bf0c8cb5"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RemoveHotKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e73bb54a-fb30-44ce-9a19-7acd4ecfa86f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Editor"",
            ""id"": ""846e3477-3b0e-4ebf-9cae-4d9208ca0b18"",
            ""actions"": [
                {
                    ""name"": ""Toogle CameraRotator"",
                    ""type"": ""Button"",
                    ""id"": ""1ad7626e-6de3-4ee6-9309-850d04bcdbc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrintSelectionFrame"",
                    ""type"": ""Button"",
                    ""id"": ""be948db6-b6af-4b0b-a6cf-81da3b65f200"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowState"",
                    ""type"": ""Button"",
                    ""id"": ""e6d8e4db-009c-4978-8613-1781aedb725e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameProgressCheat"",
                    ""type"": ""Button"",
                    ""id"": ""9e8dcdf9-7f7a-4cee-ab56-d31bf52dca43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a137cf12-a3ef-4405-978b-539ce662c162"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toogle CameraRotator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""215eabf9-dcdc-4905-a197-577c6eef2259"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrintSelectionFrame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c81882e4-c699-4c03-b3c6-337e80bfe06a"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af492f5b-fe10-4125-a4b8-ead578883f2e"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameProgressCheat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ItemUsage"",
            ""id"": ""b0e07970-ac68-4771-be2d-118d0312dd92"",
            ""actions"": [
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""f8a4533a-f074-4a26-8eb3-5986ed05483b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dcf86dba-631c-41a1-aa03-c7807ebe5ac9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c57a347-8d2f-4f8c-81fb-8656d179b5b1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Always"",
            ""id"": ""8574d6b1-8c28-4bdf-8057-87482dbc0eb5"",
            ""actions"": [
                {
                    ""name"": ""ToggleItemUsage"",
                    ""type"": ""Button"",
                    ""id"": ""0c08d6ea-605d-4567-baa1-46395fe6cd07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b75a3e7-ba97-49f8-97ac-d5ddd722846a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ToggleItemUsage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""426e1660-5d3f-4f12-972f-478427f6a6b0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleItemUsage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Death"",
            ""id"": ""96fefe65-b447-435a-b032-d3fb538ff227"",
            ""actions"": [
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""9f0dffe1-055d-4c1a-9ead-38d3045d7881"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9115db7b-fd51-45de-b1d3-0dbe6ebd5d1f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e55af723-e839-4432-8a70-4d680cb00559"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Walk = m_Gameplay.FindAction("Walk", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_RotateCamera = m_Gameplay.FindAction("RotateCamera", throwIfNotFound: true);
        m_Gameplay_Sprint = m_Gameplay.FindAction("Sprint", throwIfNotFound: true);
        m_Gameplay_Dodge = m_Gameplay.FindAction("Dodge", throwIfNotFound: true);
        m_Gameplay_RightHand1 = m_Gameplay.FindAction("RightHand1", throwIfNotFound: true);
        m_Gameplay_RightHand2 = m_Gameplay.FindAction("RightHand2", throwIfNotFound: true);
        m_Gameplay_LeftHand1 = m_Gameplay.FindAction("LeftHand1", throwIfNotFound: true);
        m_Gameplay_LeftHand2 = m_Gameplay.FindAction("LeftHand2", throwIfNotFound: true);
        m_Gameplay_LockOn = m_Gameplay.FindAction("LockOn", throwIfNotFound: true);
        m_Gameplay_SwitchLockOnTarget = m_Gameplay.FindAction("SwitchLockOnTarget", throwIfNotFound: true);
        m_Gameplay_OpenMenus = m_Gameplay.FindAction("OpenMenus", throwIfNotFound: true);
        m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CloseMenus = m_UI.FindAction("CloseMenus", throwIfNotFound: true);
        m_UI_AssignHotKey = m_UI.FindAction("AssignHotKey", throwIfNotFound: true);
        m_UI_UseItem = m_UI.FindAction("UseItem", throwIfNotFound: true);
        m_UI_Close = m_UI.FindAction("Close", throwIfNotFound: true);
        m_UI_GoToRightTab = m_UI.FindAction("GoToRightTab", throwIfNotFound: true);
        m_UI_GoToLeftTab = m_UI.FindAction("GoToLeftTab", throwIfNotFound: true);
        m_UI_RemoveHotKey = m_UI.FindAction("RemoveHotKey", throwIfNotFound: true);
        m_UI_Select = m_UI.FindAction("Select", throwIfNotFound: true);
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_ToogleCameraRotator = m_Editor.FindAction("Toogle CameraRotator", throwIfNotFound: true);
        m_Editor_PrintSelectionFrame = m_Editor.FindAction("PrintSelectionFrame", throwIfNotFound: true);
        m_Editor_ShowState = m_Editor.FindAction("ShowState", throwIfNotFound: true);
        m_Editor_GameProgressCheat = m_Editor.FindAction("GameProgressCheat", throwIfNotFound: true);
        // ItemUsage
        m_ItemUsage = asset.FindActionMap("ItemUsage", throwIfNotFound: true);
        m_ItemUsage_UseItem = m_ItemUsage.FindAction("UseItem", throwIfNotFound: true);
        // Always
        m_Always = asset.FindActionMap("Always", throwIfNotFound: true);
        m_Always_ToggleItemUsage = m_Always.FindAction("ToggleItemUsage", throwIfNotFound: true);
        // Death
        m_Death = asset.FindActionMap("Death", throwIfNotFound: true);
        m_Death_RotateCamera = m_Death.FindAction("RotateCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Walk;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_RotateCamera;
    private readonly InputAction m_Gameplay_Sprint;
    private readonly InputAction m_Gameplay_Dodge;
    private readonly InputAction m_Gameplay_RightHand1;
    private readonly InputAction m_Gameplay_RightHand2;
    private readonly InputAction m_Gameplay_LeftHand1;
    private readonly InputAction m_Gameplay_LeftHand2;
    private readonly InputAction m_Gameplay_LockOn;
    private readonly InputAction m_Gameplay_SwitchLockOnTarget;
    private readonly InputAction m_Gameplay_OpenMenus;
    private readonly InputAction m_Gameplay_Interact;
    public struct GameplayActions
    {
        private @InputAsset m_Wrapper;
        public GameplayActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Gameplay_Walk;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @RotateCamera => m_Wrapper.m_Gameplay_RotateCamera;
        public InputAction @Sprint => m_Wrapper.m_Gameplay_Sprint;
        public InputAction @Dodge => m_Wrapper.m_Gameplay_Dodge;
        public InputAction @RightHand1 => m_Wrapper.m_Gameplay_RightHand1;
        public InputAction @RightHand2 => m_Wrapper.m_Gameplay_RightHand2;
        public InputAction @LeftHand1 => m_Wrapper.m_Gameplay_LeftHand1;
        public InputAction @LeftHand2 => m_Wrapper.m_Gameplay_LeftHand2;
        public InputAction @LockOn => m_Wrapper.m_Gameplay_LockOn;
        public InputAction @SwitchLockOnTarget => m_Wrapper.m_Gameplay_SwitchLockOnTarget;
        public InputAction @OpenMenus => m_Wrapper.m_Gameplay_OpenMenus;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJump;
                @RotateCamera.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateCamera;
                @Sprint.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
                @Dodge.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDodge;
                @RightHand1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand1;
                @RightHand1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand1;
                @RightHand1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand1;
                @RightHand2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand2;
                @RightHand2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand2;
                @RightHand2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightHand2;
                @LeftHand1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand1;
                @LeftHand1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand1;
                @LeftHand1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand1;
                @LeftHand2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand2;
                @LeftHand2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand2;
                @LeftHand2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftHand2;
                @LockOn.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOn;
                @LockOn.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOn;
                @LockOn.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOn;
                @SwitchLockOnTarget.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitchLockOnTarget;
                @SwitchLockOnTarget.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitchLockOnTarget;
                @SwitchLockOnTarget.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwitchLockOnTarget;
                @OpenMenus.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenMenus;
                @OpenMenus.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenMenus;
                @OpenMenus.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenMenus;
                @Interact.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @RightHand1.started += instance.OnRightHand1;
                @RightHand1.performed += instance.OnRightHand1;
                @RightHand1.canceled += instance.OnRightHand1;
                @RightHand2.started += instance.OnRightHand2;
                @RightHand2.performed += instance.OnRightHand2;
                @RightHand2.canceled += instance.OnRightHand2;
                @LeftHand1.started += instance.OnLeftHand1;
                @LeftHand1.performed += instance.OnLeftHand1;
                @LeftHand1.canceled += instance.OnLeftHand1;
                @LeftHand2.started += instance.OnLeftHand2;
                @LeftHand2.performed += instance.OnLeftHand2;
                @LeftHand2.canceled += instance.OnLeftHand2;
                @LockOn.started += instance.OnLockOn;
                @LockOn.performed += instance.OnLockOn;
                @LockOn.canceled += instance.OnLockOn;
                @SwitchLockOnTarget.started += instance.OnSwitchLockOnTarget;
                @SwitchLockOnTarget.performed += instance.OnSwitchLockOnTarget;
                @SwitchLockOnTarget.canceled += instance.OnSwitchLockOnTarget;
                @OpenMenus.started += instance.OnOpenMenus;
                @OpenMenus.performed += instance.OnOpenMenus;
                @OpenMenus.canceled += instance.OnOpenMenus;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_CloseMenus;
    private readonly InputAction m_UI_AssignHotKey;
    private readonly InputAction m_UI_UseItem;
    private readonly InputAction m_UI_Close;
    private readonly InputAction m_UI_GoToRightTab;
    private readonly InputAction m_UI_GoToLeftTab;
    private readonly InputAction m_UI_RemoveHotKey;
    private readonly InputAction m_UI_Select;
    public struct UIActions
    {
        private @InputAsset m_Wrapper;
        public UIActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMenus => m_Wrapper.m_UI_CloseMenus;
        public InputAction @AssignHotKey => m_Wrapper.m_UI_AssignHotKey;
        public InputAction @UseItem => m_Wrapper.m_UI_UseItem;
        public InputAction @Close => m_Wrapper.m_UI_Close;
        public InputAction @GoToRightTab => m_Wrapper.m_UI_GoToRightTab;
        public InputAction @GoToLeftTab => m_Wrapper.m_UI_GoToLeftTab;
        public InputAction @RemoveHotKey => m_Wrapper.m_UI_RemoveHotKey;
        public InputAction @Select => m_Wrapper.m_UI_Select;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @CloseMenus.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseMenus;
                @CloseMenus.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseMenus;
                @CloseMenus.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCloseMenus;
                @AssignHotKey.started -= m_Wrapper.m_UIActionsCallbackInterface.OnAssignHotKey;
                @AssignHotKey.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnAssignHotKey;
                @AssignHotKey.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnAssignHotKey;
                @UseItem.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUseItem;
                @Close.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClose;
                @GoToRightTab.started -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToRightTab;
                @GoToRightTab.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToRightTab;
                @GoToRightTab.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToRightTab;
                @GoToLeftTab.started -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToLeftTab;
                @GoToLeftTab.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToLeftTab;
                @GoToLeftTab.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnGoToLeftTab;
                @RemoveHotKey.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveHotKey;
                @RemoveHotKey.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveHotKey;
                @RemoveHotKey.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveHotKey;
                @Select.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseMenus.started += instance.OnCloseMenus;
                @CloseMenus.performed += instance.OnCloseMenus;
                @CloseMenus.canceled += instance.OnCloseMenus;
                @AssignHotKey.started += instance.OnAssignHotKey;
                @AssignHotKey.performed += instance.OnAssignHotKey;
                @AssignHotKey.canceled += instance.OnAssignHotKey;
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
                @GoToRightTab.started += instance.OnGoToRightTab;
                @GoToRightTab.performed += instance.OnGoToRightTab;
                @GoToRightTab.canceled += instance.OnGoToRightTab;
                @GoToLeftTab.started += instance.OnGoToLeftTab;
                @GoToLeftTab.performed += instance.OnGoToLeftTab;
                @GoToLeftTab.canceled += instance.OnGoToLeftTab;
                @RemoveHotKey.started += instance.OnRemoveHotKey;
                @RemoveHotKey.performed += instance.OnRemoveHotKey;
                @RemoveHotKey.canceled += instance.OnRemoveHotKey;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Editor
    private readonly InputActionMap m_Editor;
    private IEditorActions m_EditorActionsCallbackInterface;
    private readonly InputAction m_Editor_ToogleCameraRotator;
    private readonly InputAction m_Editor_PrintSelectionFrame;
    private readonly InputAction m_Editor_ShowState;
    private readonly InputAction m_Editor_GameProgressCheat;
    public struct EditorActions
    {
        private @InputAsset m_Wrapper;
        public EditorActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToogleCameraRotator => m_Wrapper.m_Editor_ToogleCameraRotator;
        public InputAction @PrintSelectionFrame => m_Wrapper.m_Editor_PrintSelectionFrame;
        public InputAction @ShowState => m_Wrapper.m_Editor_ShowState;
        public InputAction @GameProgressCheat => m_Wrapper.m_Editor_GameProgressCheat;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void SetCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterface != null)
            {
                @ToogleCameraRotator.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnToogleCameraRotator;
                @ToogleCameraRotator.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnToogleCameraRotator;
                @ToogleCameraRotator.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnToogleCameraRotator;
                @PrintSelectionFrame.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnPrintSelectionFrame;
                @PrintSelectionFrame.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnPrintSelectionFrame;
                @PrintSelectionFrame.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnPrintSelectionFrame;
                @ShowState.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnShowState;
                @ShowState.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnShowState;
                @ShowState.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnShowState;
                @GameProgressCheat.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnGameProgressCheat;
                @GameProgressCheat.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnGameProgressCheat;
                @GameProgressCheat.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnGameProgressCheat;
            }
            m_Wrapper.m_EditorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToogleCameraRotator.started += instance.OnToogleCameraRotator;
                @ToogleCameraRotator.performed += instance.OnToogleCameraRotator;
                @ToogleCameraRotator.canceled += instance.OnToogleCameraRotator;
                @PrintSelectionFrame.started += instance.OnPrintSelectionFrame;
                @PrintSelectionFrame.performed += instance.OnPrintSelectionFrame;
                @PrintSelectionFrame.canceled += instance.OnPrintSelectionFrame;
                @ShowState.started += instance.OnShowState;
                @ShowState.performed += instance.OnShowState;
                @ShowState.canceled += instance.OnShowState;
                @GameProgressCheat.started += instance.OnGameProgressCheat;
                @GameProgressCheat.performed += instance.OnGameProgressCheat;
                @GameProgressCheat.canceled += instance.OnGameProgressCheat;
            }
        }
    }
    public EditorActions @Editor => new EditorActions(this);

    // ItemUsage
    private readonly InputActionMap m_ItemUsage;
    private IItemUsageActions m_ItemUsageActionsCallbackInterface;
    private readonly InputAction m_ItemUsage_UseItem;
    public struct ItemUsageActions
    {
        private @InputAsset m_Wrapper;
        public ItemUsageActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItem => m_Wrapper.m_ItemUsage_UseItem;
        public InputActionMap Get() { return m_Wrapper.m_ItemUsage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemUsageActions set) { return set.Get(); }
        public void SetCallbacks(IItemUsageActions instance)
        {
            if (m_Wrapper.m_ItemUsageActionsCallbackInterface != null)
            {
                @UseItem.started -= m_Wrapper.m_ItemUsageActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_ItemUsageActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_ItemUsageActionsCallbackInterface.OnUseItem;
            }
            m_Wrapper.m_ItemUsageActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
            }
        }
    }
    public ItemUsageActions @ItemUsage => new ItemUsageActions(this);

    // Always
    private readonly InputActionMap m_Always;
    private IAlwaysActions m_AlwaysActionsCallbackInterface;
    private readonly InputAction m_Always_ToggleItemUsage;
    public struct AlwaysActions
    {
        private @InputAsset m_Wrapper;
        public AlwaysActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleItemUsage => m_Wrapper.m_Always_ToggleItemUsage;
        public InputActionMap Get() { return m_Wrapper.m_Always; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlwaysActions set) { return set.Get(); }
        public void SetCallbacks(IAlwaysActions instance)
        {
            if (m_Wrapper.m_AlwaysActionsCallbackInterface != null)
            {
                @ToggleItemUsage.started -= m_Wrapper.m_AlwaysActionsCallbackInterface.OnToggleItemUsage;
                @ToggleItemUsage.performed -= m_Wrapper.m_AlwaysActionsCallbackInterface.OnToggleItemUsage;
                @ToggleItemUsage.canceled -= m_Wrapper.m_AlwaysActionsCallbackInterface.OnToggleItemUsage;
            }
            m_Wrapper.m_AlwaysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleItemUsage.started += instance.OnToggleItemUsage;
                @ToggleItemUsage.performed += instance.OnToggleItemUsage;
                @ToggleItemUsage.canceled += instance.OnToggleItemUsage;
            }
        }
    }
    public AlwaysActions @Always => new AlwaysActions(this);

    // Death
    private readonly InputActionMap m_Death;
    private IDeathActions m_DeathActionsCallbackInterface;
    private readonly InputAction m_Death_RotateCamera;
    public struct DeathActions
    {
        private @InputAsset m_Wrapper;
        public DeathActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCamera => m_Wrapper.m_Death_RotateCamera;
        public InputActionMap Get() { return m_Wrapper.m_Death; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeathActions set) { return set.Get(); }
        public void SetCallbacks(IDeathActions instance)
        {
            if (m_Wrapper.m_DeathActionsCallbackInterface != null)
            {
                @RotateCamera.started -= m_Wrapper.m_DeathActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_DeathActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_DeathActionsCallbackInterface.OnRotateCamera;
            }
            m_Wrapper.m_DeathActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
            }
        }
    }
    public DeathActions @Death => new DeathActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnRightHand1(InputAction.CallbackContext context);
        void OnRightHand2(InputAction.CallbackContext context);
        void OnLeftHand1(InputAction.CallbackContext context);
        void OnLeftHand2(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnSwitchLockOnTarget(InputAction.CallbackContext context);
        void OnOpenMenus(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnCloseMenus(InputAction.CallbackContext context);
        void OnAssignHotKey(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
        void OnGoToRightTab(InputAction.CallbackContext context);
        void OnGoToLeftTab(InputAction.CallbackContext context);
        void OnRemoveHotKey(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IEditorActions
    {
        void OnToogleCameraRotator(InputAction.CallbackContext context);
        void OnPrintSelectionFrame(InputAction.CallbackContext context);
        void OnShowState(InputAction.CallbackContext context);
        void OnGameProgressCheat(InputAction.CallbackContext context);
    }
    public interface IItemUsageActions
    {
        void OnUseItem(InputAction.CallbackContext context);
    }
    public interface IAlwaysActions
    {
        void OnToggleItemUsage(InputAction.CallbackContext context);
    }
    public interface IDeathActions
    {
        void OnRotateCamera(InputAction.CallbackContext context);
    }
}
